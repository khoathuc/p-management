generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkspaceRole {
  Member
  Owner
  Admin
}

enum UserStatus {
  Active
  Deactivated
}

model User {
  id String @id @default(cuid())

  username String @unique @db.VarChar(255)
  email    String @unique @db.VarChar(255)

  password String @db.VarChar(255)
  status   UserStatus @default(Deactivated) 

  firstName          String? @db.VarChar(255)
  lastName           String? @db.VarChar(255)
  avatar             String? @db.VarChar(255)
  currentWorkspaceId String? @db.VarChar(255)
  emailVerified      Boolean @default(false)

  //data
  data Json?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id     String  @id @default(cuid())
  userId String
  name   String  @db.VarChar(255)
  logo   String?

  members String[]
  owners  String[]
  admins  String[]

  //data
  data Json?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model WorkspaceFollowing {
  id String @id @default(cuid())

  objectId String
  userId   String

  name String  @db.VarChar(255)
  logo String?

  creating Boolean
  ownering Boolean
  isAdmin  Boolean
  isMember Boolean
  //data
  data     Json?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([objectId, userId])
  @@index([userId])
}

model Invitation {
  id String @id @default(cuid())

  userId      String
  workspaceId String

  role           WorkspaceRole @default(Member)
  email          String        @db.VarChar(255)
  inviteAccepted Boolean?      @default(false)
  token          String?       @db.VarChar(32)

  //data
  data Json?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([workspaceId, userId])
}

model VerifyToken {
  id         String   @id @default(cuid())
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(32)
  expires    DateTime

  //data
  data Json?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //workspace
  workspaceId String

  //index
  @@unique([identifier, token])
  @@index([workspaceId])
  @@index([workspaceId, identifier, token])
}

model ForgotPasswordToken {
  id      String   @id @default(cuid())
  userId  String   @unique
  token   String   @unique @db.VarChar(32)
  expires DateTime
  //data
  data    Json?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
